<?php

namespace TEHAND\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
    public function myFindAll() {
                
        $queryBuilder = $this->createQueryBuilder('a');
        
        $query = $queryBuilder->getQuery();
        
        $results = $query->getResult();
        
        return $results;
    }
    
    public function MyFindOne($id) {
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.id = :id')
                ->setParameter('id',$id);
        
        return $qb->getQuery()
                ->getResult();
    }
    
    public function findByAuthorAndDate($author, $year) {
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.author = :author')
                ->setParameter('author', $author)
                ->andWhere('a.date < :year')
                ->setParameter('year', $year)
                ->orderBy('a.date', 'DESC');
        
        return $qb
                ->getQuery()
                ->getResult();
    }
    
    public function whereCurrentYear(QueryBuilder $qb) {
        $qb
                ->andWhere('a.date BETWEEN :start AND :end') //Faire un filtre pour une intervale de date
                ->setParameter('start', new \DateTime(date('Y').'-01-01'))
                ->setParameter('end', new \DateTime(date('Y').'-12-31'));
    }
    
    public function myFind() {
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.author = :author')
                ->setParameter('author', 'Marine');
        
        $this->whereCurrentYear('a.date', 'DESC');
        
        return $qb
                ->getQuery()
                ->getResult();
    }
    
    public function getAdvertWithCategories(array $categoryNames) {
        $qb =$this->createQueryBuilder('a');
        
        // On fait une jointure avec l'entité Category avec pour alias
        $qb
                ->innerJoin('a.categories', 'c')
                ->addSelect('c');
        
        // Puis on filtre sur les nom des categories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        
        //En fin on retourne le résultat
        return $qb->getQuery()
                ->getResult();
    }
    
    public function getAdverts($page, $nbPerPage) {
        $query = $this->createQueryBuilder('a')
                
                // Jointure sur l'attribut image
                ->leftJoin('a.image','i')
                ->addSelect('i')
                
                // Jointure sur categories
                ->leftJoin('a.categories','c')
                ->addSelect('c')
                ->orderBy('a.date', 'DESC')
                ->getQuery();
        $query
                //On définit l'annonce à partir de laquelle comencer la liste
                ->setFirstResult(($page - 1) * $nbPerPage)
                //Ainsi que le nombre d'annonce à afficher sur une page
                ->setMaxResults($nbPerPage);
        
        return new Paginator($query, true);
    }
}
